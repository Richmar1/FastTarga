/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGCSHARP
#define SWIGCSHARP
#endif



#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


#include <stdlib.h>
#include <string.h>
#include <stdio.h>


/* Support for throwing C# exceptions from C/C++. There are two types: 
 * Exceptions that take a message and ArgumentExceptions that take a message and a parameter name. */
typedef enum {
  SWIG_CSharpApplicationException,
  SWIG_CSharpArithmeticException,
  SWIG_CSharpDivideByZeroException,
  SWIG_CSharpIndexOutOfRangeException,
  SWIG_CSharpInvalidCastException,
  SWIG_CSharpInvalidOperationException,
  SWIG_CSharpIOException,
  SWIG_CSharpNullReferenceException,
  SWIG_CSharpOutOfMemoryException,
  SWIG_CSharpOverflowException,
  SWIG_CSharpSystemException
} SWIG_CSharpExceptionCodes;

typedef enum {
  SWIG_CSharpArgumentException,
  SWIG_CSharpArgumentNullException,
  SWIG_CSharpArgumentOutOfRangeException
} SWIG_CSharpExceptionArgumentCodes;

typedef void (SWIGSTDCALL* SWIG_CSharpExceptionCallback_t)(const char *);
typedef void (SWIGSTDCALL* SWIG_CSharpExceptionArgumentCallback_t)(const char *, const char *);

typedef struct {
  SWIG_CSharpExceptionCodes code;
  SWIG_CSharpExceptionCallback_t callback;
} SWIG_CSharpException_t;

typedef struct {
  SWIG_CSharpExceptionArgumentCodes code;
  SWIG_CSharpExceptionArgumentCallback_t callback;
} SWIG_CSharpExceptionArgument_t;

static SWIG_CSharpException_t SWIG_csharp_exceptions[] = {
  { SWIG_CSharpApplicationException, NULL },
  { SWIG_CSharpArithmeticException, NULL },
  { SWIG_CSharpDivideByZeroException, NULL },
  { SWIG_CSharpIndexOutOfRangeException, NULL },
  { SWIG_CSharpInvalidCastException, NULL },
  { SWIG_CSharpInvalidOperationException, NULL },
  { SWIG_CSharpIOException, NULL },
  { SWIG_CSharpNullReferenceException, NULL },
  { SWIG_CSharpOutOfMemoryException, NULL },
  { SWIG_CSharpOverflowException, NULL },
  { SWIG_CSharpSystemException, NULL }
};

static SWIG_CSharpExceptionArgument_t SWIG_csharp_exceptions_argument[] = {
  { SWIG_CSharpArgumentException, NULL },
  { SWIG_CSharpArgumentNullException, NULL },
  { SWIG_CSharpArgumentOutOfRangeException, NULL }
};

static void SWIGUNUSED SWIG_CSharpSetPendingException(SWIG_CSharpExceptionCodes code, const char *msg) {
  SWIG_CSharpExceptionCallback_t callback = SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions)/sizeof(SWIG_CSharpException_t)) {
    callback = SWIG_csharp_exceptions[code].callback;
  }
  callback(msg);
}

static void SWIGUNUSED SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpExceptionArgumentCodes code, const char *msg, const char *param_name) {
  SWIG_CSharpExceptionArgumentCallback_t callback = SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions_argument)/sizeof(SWIG_CSharpExceptionArgument_t)) {
    callback = SWIG_csharp_exceptions_argument[code].callback;
  }
  callback(msg, param_name);
}


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionCallbacks_FastTarga(
                                                SWIG_CSharpExceptionCallback_t applicationCallback,
                                                SWIG_CSharpExceptionCallback_t arithmeticCallback,
                                                SWIG_CSharpExceptionCallback_t divideByZeroCallback, 
                                                SWIG_CSharpExceptionCallback_t indexOutOfRangeCallback, 
                                                SWIG_CSharpExceptionCallback_t invalidCastCallback,
                                                SWIG_CSharpExceptionCallback_t invalidOperationCallback,
                                                SWIG_CSharpExceptionCallback_t ioCallback,
                                                SWIG_CSharpExceptionCallback_t nullReferenceCallback,
                                                SWIG_CSharpExceptionCallback_t outOfMemoryCallback, 
                                                SWIG_CSharpExceptionCallback_t overflowCallback, 
                                                SWIG_CSharpExceptionCallback_t systemCallback) {
  SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback = applicationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpArithmeticException].callback = arithmeticCallback;
  SWIG_csharp_exceptions[SWIG_CSharpDivideByZeroException].callback = divideByZeroCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIndexOutOfRangeException].callback = indexOutOfRangeCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidCastException].callback = invalidCastCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidOperationException].callback = invalidOperationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIOException].callback = ioCallback;
  SWIG_csharp_exceptions[SWIG_CSharpNullReferenceException].callback = nullReferenceCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOutOfMemoryException].callback = outOfMemoryCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOverflowException].callback = overflowCallback;
  SWIG_csharp_exceptions[SWIG_CSharpSystemException].callback = systemCallback;
}

#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionArgumentCallbacks_FastTarga(
                                                SWIG_CSharpExceptionArgumentCallback_t argumentCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentNullCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentOutOfRangeCallback) {
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback = argumentCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentNullException].callback = argumentNullCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentOutOfRangeException].callback = argumentOutOfRangeCallback;
}


/* Callback for returning strings to C# without leaking memory */
typedef char * (SWIGSTDCALL* SWIG_CSharpStringHelperCallback)(const char *);
static SWIG_CSharpStringHelperCallback SWIG_csharp_string_callback = NULL;


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterStringCallback_FastTarga(SWIG_CSharpStringHelperCallback callback) {
  SWIG_csharp_string_callback = callback;
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, msg, ""); return nullreturn; } else


    #include "TargaImage.h"


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT int SWIGSTDCALL CSharp_FASTTARGA_HEADERONLY_get() {
  int jresult ;
  int result;
  
  result = (int)(0);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_STargaImage__SWIG_0() {
  void * jresult ;
  STargaImage *result = 0 ;
  
  result = (STargaImage *)new STargaImage();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_STargaImage(void * jarg1) {
  STargaImage *arg1 = (STargaImage *) 0 ;
  
  arg1 = (STargaImage *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_STargaImage__SWIG_1(void * jarg1) {
  void * jresult ;
  STargaImage *arg1 = 0 ;
  STargaImage *result = 0 ;
  
  arg1 = (STargaImage *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "STargaImage && type is null", 0);
    return 0;
  } 
  result = (STargaImage *)new STargaImage((STargaImage &&)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_STargaImage_Load(char * jarg1) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  STargaImage result;
  
  arg1 = (char *)jarg1; 
  result = STargaImage::Load((char const *)arg1);
  jresult = new STargaImage((const STargaImage &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_STargaImage_Save(void * jarg1, char * jarg2) {
  STargaImage *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (STargaImage *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "STargaImage const & type is null", 0);
    return ;
  } 
  arg2 = (char *)jarg2; 
  STargaImage::Save((STargaImage const &)*arg1,(char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_STargaImage_SHeader_SColorMapSpecification_FirstEntryIndex_set(void * jarg1, unsigned short jarg2) {
  STargaImage::SHeader::SColorMapSpecification *arg1 = (STargaImage::SHeader::SColorMapSpecification *) 0 ;
  uint16_t arg2 ;
  
  arg1 = (STargaImage::SHeader::SColorMapSpecification *)jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->FirstEntryIndex = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_STargaImage_SHeader_SColorMapSpecification_FirstEntryIndex_get(void * jarg1) {
  unsigned short jresult ;
  STargaImage::SHeader::SColorMapSpecification *arg1 = (STargaImage::SHeader::SColorMapSpecification *) 0 ;
  uint16_t result;
  
  arg1 = (STargaImage::SHeader::SColorMapSpecification *)jarg1; 
  result = (uint16_t) ((arg1)->FirstEntryIndex);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_STargaImage_SHeader_SColorMapSpecification_ColorMapLength_set(void * jarg1, unsigned short jarg2) {
  STargaImage::SHeader::SColorMapSpecification *arg1 = (STargaImage::SHeader::SColorMapSpecification *) 0 ;
  uint16_t arg2 ;
  
  arg1 = (STargaImage::SHeader::SColorMapSpecification *)jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->ColorMapLength = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_STargaImage_SHeader_SColorMapSpecification_ColorMapLength_get(void * jarg1) {
  unsigned short jresult ;
  STargaImage::SHeader::SColorMapSpecification *arg1 = (STargaImage::SHeader::SColorMapSpecification *) 0 ;
  uint16_t result;
  
  arg1 = (STargaImage::SHeader::SColorMapSpecification *)jarg1; 
  result = (uint16_t) ((arg1)->ColorMapLength);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_STargaImage_SHeader_SColorMapSpecification_ColorMapEntrySize_set(void * jarg1, unsigned char jarg2) {
  STargaImage::SHeader::SColorMapSpecification *arg1 = (STargaImage::SHeader::SColorMapSpecification *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (STargaImage::SHeader::SColorMapSpecification *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->ColorMapEntrySize = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_STargaImage_SHeader_SColorMapSpecification_ColorMapEntrySize_get(void * jarg1) {
  unsigned char jresult ;
  STargaImage::SHeader::SColorMapSpecification *arg1 = (STargaImage::SHeader::SColorMapSpecification *) 0 ;
  uint8_t result;
  
  arg1 = (STargaImage::SHeader::SColorMapSpecification *)jarg1; 
  result = (uint8_t) ((arg1)->ColorMapEntrySize);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_STargaImage_SHeader_SColorMapSpecification() {
  void * jresult ;
  STargaImage::SHeader::SColorMapSpecification *result = 0 ;
  
  result = (STargaImage::SHeader::SColorMapSpecification *)new STargaImage::SHeader::SColorMapSpecification();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_STargaImage_SHeader_SColorMapSpecification(void * jarg1) {
  STargaImage::SHeader::SColorMapSpecification *arg1 = (STargaImage::SHeader::SColorMapSpecification *) 0 ;
  
  arg1 = (STargaImage::SHeader::SColorMapSpecification *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_STargaImage_SHeader_SImageSpecification_ImageXOrigin_set(void * jarg1, unsigned short jarg2) {
  STargaImage::SHeader::SImageSpecification *arg1 = (STargaImage::SHeader::SImageSpecification *) 0 ;
  uint16_t arg2 ;
  
  arg1 = (STargaImage::SHeader::SImageSpecification *)jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->ImageXOrigin = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_STargaImage_SHeader_SImageSpecification_ImageXOrigin_get(void * jarg1) {
  unsigned short jresult ;
  STargaImage::SHeader::SImageSpecification *arg1 = (STargaImage::SHeader::SImageSpecification *) 0 ;
  uint16_t result;
  
  arg1 = (STargaImage::SHeader::SImageSpecification *)jarg1; 
  result = (uint16_t) ((arg1)->ImageXOrigin);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_STargaImage_SHeader_SImageSpecification_ImageYOrigin_set(void * jarg1, unsigned short jarg2) {
  STargaImage::SHeader::SImageSpecification *arg1 = (STargaImage::SHeader::SImageSpecification *) 0 ;
  uint16_t arg2 ;
  
  arg1 = (STargaImage::SHeader::SImageSpecification *)jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->ImageYOrigin = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_STargaImage_SHeader_SImageSpecification_ImageYOrigin_get(void * jarg1) {
  unsigned short jresult ;
  STargaImage::SHeader::SImageSpecification *arg1 = (STargaImage::SHeader::SImageSpecification *) 0 ;
  uint16_t result;
  
  arg1 = (STargaImage::SHeader::SImageSpecification *)jarg1; 
  result = (uint16_t) ((arg1)->ImageYOrigin);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_STargaImage_SHeader_SImageSpecification_ImageWidth_set(void * jarg1, unsigned short jarg2) {
  STargaImage::SHeader::SImageSpecification *arg1 = (STargaImage::SHeader::SImageSpecification *) 0 ;
  uint16_t arg2 ;
  
  arg1 = (STargaImage::SHeader::SImageSpecification *)jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->ImageWidth = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_STargaImage_SHeader_SImageSpecification_ImageWidth_get(void * jarg1) {
  unsigned short jresult ;
  STargaImage::SHeader::SImageSpecification *arg1 = (STargaImage::SHeader::SImageSpecification *) 0 ;
  uint16_t result;
  
  arg1 = (STargaImage::SHeader::SImageSpecification *)jarg1; 
  result = (uint16_t) ((arg1)->ImageWidth);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_STargaImage_SHeader_SImageSpecification_ImageHeight_set(void * jarg1, unsigned short jarg2) {
  STargaImage::SHeader::SImageSpecification *arg1 = (STargaImage::SHeader::SImageSpecification *) 0 ;
  uint16_t arg2 ;
  
  arg1 = (STargaImage::SHeader::SImageSpecification *)jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->ImageHeight = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_STargaImage_SHeader_SImageSpecification_ImageHeight_get(void * jarg1) {
  unsigned short jresult ;
  STargaImage::SHeader::SImageSpecification *arg1 = (STargaImage::SHeader::SImageSpecification *) 0 ;
  uint16_t result;
  
  arg1 = (STargaImage::SHeader::SImageSpecification *)jarg1; 
  result = (uint16_t) ((arg1)->ImageHeight);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_STargaImage_SHeader_SImageSpecification_ImageDepth_set(void * jarg1, unsigned char jarg2) {
  STargaImage::SHeader::SImageSpecification *arg1 = (STargaImage::SHeader::SImageSpecification *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (STargaImage::SHeader::SImageSpecification *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->ImageDepth = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_STargaImage_SHeader_SImageSpecification_ImageDepth_get(void * jarg1) {
  unsigned char jresult ;
  STargaImage::SHeader::SImageSpecification *arg1 = (STargaImage::SHeader::SImageSpecification *) 0 ;
  uint8_t result;
  
  arg1 = (STargaImage::SHeader::SImageSpecification *)jarg1; 
  result = (uint8_t) ((arg1)->ImageDepth);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_STargaImage_SHeader_SImageSpecification_ImageDescriptor_set(void * jarg1, unsigned char jarg2) {
  STargaImage::SHeader::SImageSpecification *arg1 = (STargaImage::SHeader::SImageSpecification *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (STargaImage::SHeader::SImageSpecification *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->ImageDescriptor = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_STargaImage_SHeader_SImageSpecification_ImageDescriptor_get(void * jarg1) {
  unsigned char jresult ;
  STargaImage::SHeader::SImageSpecification *arg1 = (STargaImage::SHeader::SImageSpecification *) 0 ;
  uint8_t result;
  
  arg1 = (STargaImage::SHeader::SImageSpecification *)jarg1; 
  result = (uint8_t) ((arg1)->ImageDescriptor);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_STargaImage_SHeader_SImageSpecification() {
  void * jresult ;
  STargaImage::SHeader::SImageSpecification *result = 0 ;
  
  result = (STargaImage::SHeader::SImageSpecification *)new STargaImage::SHeader::SImageSpecification();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_STargaImage_SHeader_SImageSpecification(void * jarg1) {
  STargaImage::SHeader::SImageSpecification *arg1 = (STargaImage::SHeader::SImageSpecification *) 0 ;
  
  arg1 = (STargaImage::SHeader::SImageSpecification *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_STargaImage_SHeader_IDLength_set(void * jarg1, unsigned char jarg2) {
  STargaImage::SHeader *arg1 = (STargaImage::SHeader *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (STargaImage::SHeader *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->IDLength = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_STargaImage_SHeader_IDLength_get(void * jarg1) {
  unsigned char jresult ;
  STargaImage::SHeader *arg1 = (STargaImage::SHeader *) 0 ;
  uint8_t result;
  
  arg1 = (STargaImage::SHeader *)jarg1; 
  result = (uint8_t) ((arg1)->IDLength);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_STargaImage_SHeader_ColorMapType_set(void * jarg1, unsigned char jarg2) {
  STargaImage::SHeader *arg1 = (STargaImage::SHeader *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (STargaImage::SHeader *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->ColorMapType = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_STargaImage_SHeader_ColorMapType_get(void * jarg1) {
  unsigned char jresult ;
  STargaImage::SHeader *arg1 = (STargaImage::SHeader *) 0 ;
  uint8_t result;
  
  arg1 = (STargaImage::SHeader *)jarg1; 
  result = (uint8_t) ((arg1)->ColorMapType);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_STargaImage_SHeader_ImageType_set(void * jarg1, unsigned char jarg2) {
  STargaImage::SHeader *arg1 = (STargaImage::SHeader *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (STargaImage::SHeader *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->ImageType = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_STargaImage_SHeader_ImageType_get(void * jarg1) {
  unsigned char jresult ;
  STargaImage::SHeader *arg1 = (STargaImage::SHeader *) 0 ;
  uint8_t result;
  
  arg1 = (STargaImage::SHeader *)jarg1; 
  result = (uint8_t) ((arg1)->ImageType);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_STargaImage_SHeader_ColorMapSpec_set(void * jarg1, void * jarg2) {
  STargaImage::SHeader *arg1 = (STargaImage::SHeader *) 0 ;
  STargaImage::SHeader::SColorMapSpecification *arg2 = (STargaImage::SHeader::SColorMapSpecification *) 0 ;
  
  arg1 = (STargaImage::SHeader *)jarg1; 
  arg2 = (STargaImage::SHeader::SColorMapSpecification *)jarg2; 
  if (arg1) (arg1)->ColorMapSpec = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_STargaImage_SHeader_ColorMapSpec_get(void * jarg1) {
  void * jresult ;
  STargaImage::SHeader *arg1 = (STargaImage::SHeader *) 0 ;
  STargaImage::SHeader::SColorMapSpecification *result = 0 ;
  
  arg1 = (STargaImage::SHeader *)jarg1; 
  result = (STargaImage::SHeader::SColorMapSpecification *)& ((arg1)->ColorMapSpec);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_STargaImage_SHeader_ImageSpec_set(void * jarg1, void * jarg2) {
  STargaImage::SHeader *arg1 = (STargaImage::SHeader *) 0 ;
  STargaImage::SHeader::SImageSpecification *arg2 = (STargaImage::SHeader::SImageSpecification *) 0 ;
  
  arg1 = (STargaImage::SHeader *)jarg1; 
  arg2 = (STargaImage::SHeader::SImageSpecification *)jarg2; 
  if (arg1) (arg1)->ImageSpec = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_STargaImage_SHeader_ImageSpec_get(void * jarg1) {
  void * jresult ;
  STargaImage::SHeader *arg1 = (STargaImage::SHeader *) 0 ;
  STargaImage::SHeader::SImageSpecification *result = 0 ;
  
  arg1 = (STargaImage::SHeader *)jarg1; 
  result = (STargaImage::SHeader::SImageSpecification *)& ((arg1)->ImageSpec);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_STargaImage_SHeader() {
  void * jresult ;
  STargaImage::SHeader *result = 0 ;
  
  result = (STargaImage::SHeader *)new STargaImage::SHeader();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_STargaImage_SHeader(void * jarg1) {
  STargaImage::SHeader *arg1 = (STargaImage::SHeader *) 0 ;
  
  arg1 = (STargaImage::SHeader *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_STargaImage_SData_ImageID_set(void * jarg1, void * jarg2) {
  STargaImage::SData *arg1 = (STargaImage::SData *) 0 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  
  arg1 = (STargaImage::SData *)jarg1; 
  arg2 = (uint8_t *)jarg2; 
  if (arg1) (arg1)->ImageID = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_STargaImage_SData_ImageID_get(void * jarg1) {
  void * jresult ;
  STargaImage::SData *arg1 = (STargaImage::SData *) 0 ;
  uint8_t *result = 0 ;
  
  arg1 = (STargaImage::SData *)jarg1; 
  result = (uint8_t *) ((arg1)->ImageID);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_STargaImage_SData_ColorMapData_set(void * jarg1, void * jarg2) {
  STargaImage::SData *arg1 = (STargaImage::SData *) 0 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  
  arg1 = (STargaImage::SData *)jarg1; 
  arg2 = (uint8_t *)jarg2; 
  if (arg1) (arg1)->ColorMapData = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_STargaImage_SData_ColorMapData_get(void * jarg1) {
  void * jresult ;
  STargaImage::SData *arg1 = (STargaImage::SData *) 0 ;
  uint8_t *result = 0 ;
  
  arg1 = (STargaImage::SData *)jarg1; 
  result = (uint8_t *) ((arg1)->ColorMapData);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_STargaImage_SData_ImageData_set(void * jarg1, void * jarg2) {
  STargaImage::SData *arg1 = (STargaImage::SData *) 0 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  
  arg1 = (STargaImage::SData *)jarg1; 
  arg2 = (uint8_t *)jarg2; 
  if (arg1) (arg1)->ImageData = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_STargaImage_SData_ImageData_get(void * jarg1) {
  void * jresult ;
  STargaImage::SData *arg1 = (STargaImage::SData *) 0 ;
  uint8_t *result = 0 ;
  
  arg1 = (STargaImage::SData *)jarg1; 
  result = (uint8_t *) ((arg1)->ImageData);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_STargaImage_SData() {
  void * jresult ;
  STargaImage::SData *result = 0 ;
  
  result = (STargaImage::SData *)new STargaImage::SData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_STargaImage_SData(void * jarg1) {
  STargaImage::SData *arg1 = (STargaImage::SData *) 0 ;
  
  arg1 = (STargaImage::SData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_STargaImage_SDeveloperArea_DeveloperData_set(void * jarg1, void * jarg2) {
  STargaImage::SDeveloperArea *arg1 = (STargaImage::SDeveloperArea *) 0 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  
  arg1 = (STargaImage::SDeveloperArea *)jarg1; 
  arg2 = (uint8_t *)jarg2; 
  if (arg1) (arg1)->DeveloperData = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_STargaImage_SDeveloperArea_DeveloperData_get(void * jarg1) {
  void * jresult ;
  STargaImage::SDeveloperArea *arg1 = (STargaImage::SDeveloperArea *) 0 ;
  uint8_t *result = 0 ;
  
  arg1 = (STargaImage::SDeveloperArea *)jarg1; 
  result = (uint8_t *) ((arg1)->DeveloperData);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_STargaImage_SDeveloperArea() {
  void * jresult ;
  STargaImage::SDeveloperArea *result = 0 ;
  
  result = (STargaImage::SDeveloperArea *)new STargaImage::SDeveloperArea();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_STargaImage_SDeveloperArea(void * jarg1) {
  STargaImage::SDeveloperArea *arg1 = (STargaImage::SDeveloperArea *) 0 ;
  
  arg1 = (STargaImage::SDeveloperArea *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_STargaImage_SDeveloperDirectory_STag_Data_set(void * jarg1, unsigned short jarg2) {
  STargaImage::SDeveloperDirectory::STag *arg1 = (STargaImage::SDeveloperDirectory::STag *) 0 ;
  uint16_t arg2 ;
  
  arg1 = (STargaImage::SDeveloperDirectory::STag *)jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->Data = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_STargaImage_SDeveloperDirectory_STag_Data_get(void * jarg1) {
  unsigned short jresult ;
  STargaImage::SDeveloperDirectory::STag *arg1 = (STargaImage::SDeveloperDirectory::STag *) 0 ;
  uint16_t result;
  
  arg1 = (STargaImage::SDeveloperDirectory::STag *)jarg1; 
  result = (uint16_t) ((arg1)->Data);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_STargaImage_SDeveloperDirectory_STag_Offset_set(void * jarg1, unsigned int jarg2) {
  STargaImage::SDeveloperDirectory::STag *arg1 = (STargaImage::SDeveloperDirectory::STag *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (STargaImage::SDeveloperDirectory::STag *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->Offset = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_STargaImage_SDeveloperDirectory_STag_Offset_get(void * jarg1) {
  unsigned int jresult ;
  STargaImage::SDeveloperDirectory::STag *arg1 = (STargaImage::SDeveloperDirectory::STag *) 0 ;
  uint32_t result;
  
  arg1 = (STargaImage::SDeveloperDirectory::STag *)jarg1; 
  result = (uint32_t) ((arg1)->Offset);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_STargaImage_SDeveloperDirectory_STag_Size_set(void * jarg1, unsigned int jarg2) {
  STargaImage::SDeveloperDirectory::STag *arg1 = (STargaImage::SDeveloperDirectory::STag *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (STargaImage::SDeveloperDirectory::STag *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->Size = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_STargaImage_SDeveloperDirectory_STag_Size_get(void * jarg1) {
  unsigned int jresult ;
  STargaImage::SDeveloperDirectory::STag *arg1 = (STargaImage::SDeveloperDirectory::STag *) 0 ;
  uint32_t result;
  
  arg1 = (STargaImage::SDeveloperDirectory::STag *)jarg1; 
  result = (uint32_t) ((arg1)->Size);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_STargaImage_SDeveloperDirectory_STag() {
  void * jresult ;
  STargaImage::SDeveloperDirectory::STag *result = 0 ;
  
  result = (STargaImage::SDeveloperDirectory::STag *)new STargaImage::SDeveloperDirectory::STag();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_STargaImage_SDeveloperDirectory_STag(void * jarg1) {
  STargaImage::SDeveloperDirectory::STag *arg1 = (STargaImage::SDeveloperDirectory::STag *) 0 ;
  
  arg1 = (STargaImage::SDeveloperDirectory::STag *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_STargaImage_SDeveloperDirectory_NumberOfTagsInDirectory_set(void * jarg1, unsigned short jarg2) {
  STargaImage::SDeveloperDirectory *arg1 = (STargaImage::SDeveloperDirectory *) 0 ;
  uint16_t arg2 ;
  
  arg1 = (STargaImage::SDeveloperDirectory *)jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->NumberOfTagsInDirectory = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_STargaImage_SDeveloperDirectory_NumberOfTagsInDirectory_get(void * jarg1) {
  unsigned short jresult ;
  STargaImage::SDeveloperDirectory *arg1 = (STargaImage::SDeveloperDirectory *) 0 ;
  uint16_t result;
  
  arg1 = (STargaImage::SDeveloperDirectory *)jarg1; 
  result = (uint16_t) ((arg1)->NumberOfTagsInDirectory);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_STargaImage_SDeveloperDirectory_Tags_set(void * jarg1, void * jarg2) {
  STargaImage::SDeveloperDirectory *arg1 = (STargaImage::SDeveloperDirectory *) 0 ;
  STargaImage::SDeveloperDirectory::STag *arg2 = (STargaImage::SDeveloperDirectory::STag *) 0 ;
  
  arg1 = (STargaImage::SDeveloperDirectory *)jarg1; 
  arg2 = (STargaImage::SDeveloperDirectory::STag *)jarg2; 
  if (arg1) (arg1)->Tags = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_STargaImage_SDeveloperDirectory_Tags_get(void * jarg1) {
  void * jresult ;
  STargaImage::SDeveloperDirectory *arg1 = (STargaImage::SDeveloperDirectory *) 0 ;
  STargaImage::SDeveloperDirectory::STag *result = 0 ;
  
  arg1 = (STargaImage::SDeveloperDirectory *)jarg1; 
  result = (STargaImage::SDeveloperDirectory::STag *) ((arg1)->Tags);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_STargaImage_SDeveloperDirectory() {
  void * jresult ;
  STargaImage::SDeveloperDirectory *result = 0 ;
  
  result = (STargaImage::SDeveloperDirectory *)new STargaImage::SDeveloperDirectory();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_STargaImage_SDeveloperDirectory(void * jarg1) {
  STargaImage::SDeveloperDirectory *arg1 = (STargaImage::SDeveloperDirectory *) 0 ;
  
  arg1 = (STargaImage::SDeveloperDirectory *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_STargaImage_SExtensionArea_STimeStamp_Month_set(void * jarg1, unsigned short jarg2) {
  STargaImage::SExtensionArea::STimeStamp *arg1 = (STargaImage::SExtensionArea::STimeStamp *) 0 ;
  uint16_t arg2 ;
  
  arg1 = (STargaImage::SExtensionArea::STimeStamp *)jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->Month = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_STargaImage_SExtensionArea_STimeStamp_Month_get(void * jarg1) {
  unsigned short jresult ;
  STargaImage::SExtensionArea::STimeStamp *arg1 = (STargaImage::SExtensionArea::STimeStamp *) 0 ;
  uint16_t result;
  
  arg1 = (STargaImage::SExtensionArea::STimeStamp *)jarg1; 
  result = (uint16_t) ((arg1)->Month);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_STargaImage_SExtensionArea_STimeStamp_Day_set(void * jarg1, unsigned short jarg2) {
  STargaImage::SExtensionArea::STimeStamp *arg1 = (STargaImage::SExtensionArea::STimeStamp *) 0 ;
  uint16_t arg2 ;
  
  arg1 = (STargaImage::SExtensionArea::STimeStamp *)jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->Day = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_STargaImage_SExtensionArea_STimeStamp_Day_get(void * jarg1) {
  unsigned short jresult ;
  STargaImage::SExtensionArea::STimeStamp *arg1 = (STargaImage::SExtensionArea::STimeStamp *) 0 ;
  uint16_t result;
  
  arg1 = (STargaImage::SExtensionArea::STimeStamp *)jarg1; 
  result = (uint16_t) ((arg1)->Day);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_STargaImage_SExtensionArea_STimeStamp_Year_set(void * jarg1, unsigned short jarg2) {
  STargaImage::SExtensionArea::STimeStamp *arg1 = (STargaImage::SExtensionArea::STimeStamp *) 0 ;
  uint16_t arg2 ;
  
  arg1 = (STargaImage::SExtensionArea::STimeStamp *)jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->Year = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_STargaImage_SExtensionArea_STimeStamp_Year_get(void * jarg1) {
  unsigned short jresult ;
  STargaImage::SExtensionArea::STimeStamp *arg1 = (STargaImage::SExtensionArea::STimeStamp *) 0 ;
  uint16_t result;
  
  arg1 = (STargaImage::SExtensionArea::STimeStamp *)jarg1; 
  result = (uint16_t) ((arg1)->Year);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_STargaImage_SExtensionArea_STimeStamp_Hour_set(void * jarg1, unsigned short jarg2) {
  STargaImage::SExtensionArea::STimeStamp *arg1 = (STargaImage::SExtensionArea::STimeStamp *) 0 ;
  uint16_t arg2 ;
  
  arg1 = (STargaImage::SExtensionArea::STimeStamp *)jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->Hour = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_STargaImage_SExtensionArea_STimeStamp_Hour_get(void * jarg1) {
  unsigned short jresult ;
  STargaImage::SExtensionArea::STimeStamp *arg1 = (STargaImage::SExtensionArea::STimeStamp *) 0 ;
  uint16_t result;
  
  arg1 = (STargaImage::SExtensionArea::STimeStamp *)jarg1; 
  result = (uint16_t) ((arg1)->Hour);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_STargaImage_SExtensionArea_STimeStamp_Minute_set(void * jarg1, unsigned short jarg2) {
  STargaImage::SExtensionArea::STimeStamp *arg1 = (STargaImage::SExtensionArea::STimeStamp *) 0 ;
  uint16_t arg2 ;
  
  arg1 = (STargaImage::SExtensionArea::STimeStamp *)jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->Minute = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_STargaImage_SExtensionArea_STimeStamp_Minute_get(void * jarg1) {
  unsigned short jresult ;
  STargaImage::SExtensionArea::STimeStamp *arg1 = (STargaImage::SExtensionArea::STimeStamp *) 0 ;
  uint16_t result;
  
  arg1 = (STargaImage::SExtensionArea::STimeStamp *)jarg1; 
  result = (uint16_t) ((arg1)->Minute);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_STargaImage_SExtensionArea_STimeStamp_Second_set(void * jarg1, unsigned short jarg2) {
  STargaImage::SExtensionArea::STimeStamp *arg1 = (STargaImage::SExtensionArea::STimeStamp *) 0 ;
  uint16_t arg2 ;
  
  arg1 = (STargaImage::SExtensionArea::STimeStamp *)jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->Second = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_STargaImage_SExtensionArea_STimeStamp_Second_get(void * jarg1) {
  unsigned short jresult ;
  STargaImage::SExtensionArea::STimeStamp *arg1 = (STargaImage::SExtensionArea::STimeStamp *) 0 ;
  uint16_t result;
  
  arg1 = (STargaImage::SExtensionArea::STimeStamp *)jarg1; 
  result = (uint16_t) ((arg1)->Second);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_STargaImage_SExtensionArea_STimeStamp() {
  void * jresult ;
  STargaImage::SExtensionArea::STimeStamp *result = 0 ;
  
  result = (STargaImage::SExtensionArea::STimeStamp *)new STargaImage::SExtensionArea::STimeStamp();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_STargaImage_SExtensionArea_STimeStamp(void * jarg1) {
  STargaImage::SExtensionArea::STimeStamp *arg1 = (STargaImage::SExtensionArea::STimeStamp *) 0 ;
  
  arg1 = (STargaImage::SExtensionArea::STimeStamp *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_STargaImage_SExtensionArea_SJobTime_Hours_set(void * jarg1, unsigned short jarg2) {
  STargaImage::SExtensionArea::SJobTime *arg1 = (STargaImage::SExtensionArea::SJobTime *) 0 ;
  uint16_t arg2 ;
  
  arg1 = (STargaImage::SExtensionArea::SJobTime *)jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->Hours = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_STargaImage_SExtensionArea_SJobTime_Hours_get(void * jarg1) {
  unsigned short jresult ;
  STargaImage::SExtensionArea::SJobTime *arg1 = (STargaImage::SExtensionArea::SJobTime *) 0 ;
  uint16_t result;
  
  arg1 = (STargaImage::SExtensionArea::SJobTime *)jarg1; 
  result = (uint16_t) ((arg1)->Hours);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_STargaImage_SExtensionArea_SJobTime_Minutes_set(void * jarg1, unsigned short jarg2) {
  STargaImage::SExtensionArea::SJobTime *arg1 = (STargaImage::SExtensionArea::SJobTime *) 0 ;
  uint16_t arg2 ;
  
  arg1 = (STargaImage::SExtensionArea::SJobTime *)jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->Minutes = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_STargaImage_SExtensionArea_SJobTime_Minutes_get(void * jarg1) {
  unsigned short jresult ;
  STargaImage::SExtensionArea::SJobTime *arg1 = (STargaImage::SExtensionArea::SJobTime *) 0 ;
  uint16_t result;
  
  arg1 = (STargaImage::SExtensionArea::SJobTime *)jarg1; 
  result = (uint16_t) ((arg1)->Minutes);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_STargaImage_SExtensionArea_SJobTime_Seconds_set(void * jarg1, unsigned short jarg2) {
  STargaImage::SExtensionArea::SJobTime *arg1 = (STargaImage::SExtensionArea::SJobTime *) 0 ;
  uint16_t arg2 ;
  
  arg1 = (STargaImage::SExtensionArea::SJobTime *)jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->Seconds = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_STargaImage_SExtensionArea_SJobTime_Seconds_get(void * jarg1) {
  unsigned short jresult ;
  STargaImage::SExtensionArea::SJobTime *arg1 = (STargaImage::SExtensionArea::SJobTime *) 0 ;
  uint16_t result;
  
  arg1 = (STargaImage::SExtensionArea::SJobTime *)jarg1; 
  result = (uint16_t) ((arg1)->Seconds);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_STargaImage_SExtensionArea_SJobTime() {
  void * jresult ;
  STargaImage::SExtensionArea::SJobTime *result = 0 ;
  
  result = (STargaImage::SExtensionArea::SJobTime *)new STargaImage::SExtensionArea::SJobTime();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_STargaImage_SExtensionArea_SJobTime(void * jarg1) {
  STargaImage::SExtensionArea::SJobTime *arg1 = (STargaImage::SExtensionArea::SJobTime *) 0 ;
  
  arg1 = (STargaImage::SExtensionArea::SJobTime *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_STargaImage_SExtensionArea_SSoftwareVersion_VersionNumber_set(void * jarg1, unsigned short jarg2) {
  STargaImage::SExtensionArea::SSoftwareVersion *arg1 = (STargaImage::SExtensionArea::SSoftwareVersion *) 0 ;
  uint16_t arg2 ;
  
  arg1 = (STargaImage::SExtensionArea::SSoftwareVersion *)jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->VersionNumber = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_STargaImage_SExtensionArea_SSoftwareVersion_VersionNumber_get(void * jarg1) {
  unsigned short jresult ;
  STargaImage::SExtensionArea::SSoftwareVersion *arg1 = (STargaImage::SExtensionArea::SSoftwareVersion *) 0 ;
  uint16_t result;
  
  arg1 = (STargaImage::SExtensionArea::SSoftwareVersion *)jarg1; 
  result = (uint16_t) ((arg1)->VersionNumber);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_STargaImage_SExtensionArea_SSoftwareVersion_VersionLetter_set(void * jarg1, unsigned char jarg2) {
  STargaImage::SExtensionArea::SSoftwareVersion *arg1 = (STargaImage::SExtensionArea::SSoftwareVersion *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (STargaImage::SExtensionArea::SSoftwareVersion *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->VersionLetter = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_STargaImage_SExtensionArea_SSoftwareVersion_VersionLetter_get(void * jarg1) {
  unsigned char jresult ;
  STargaImage::SExtensionArea::SSoftwareVersion *arg1 = (STargaImage::SExtensionArea::SSoftwareVersion *) 0 ;
  uint8_t result;
  
  arg1 = (STargaImage::SExtensionArea::SSoftwareVersion *)jarg1; 
  result = (uint8_t) ((arg1)->VersionLetter);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_STargaImage_SExtensionArea_SSoftwareVersion() {
  void * jresult ;
  STargaImage::SExtensionArea::SSoftwareVersion *result = 0 ;
  
  result = (STargaImage::SExtensionArea::SSoftwareVersion *)new STargaImage::SExtensionArea::SSoftwareVersion();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_STargaImage_SExtensionArea_SSoftwareVersion(void * jarg1) {
  STargaImage::SExtensionArea::SSoftwareVersion *arg1 = (STargaImage::SExtensionArea::SSoftwareVersion *) 0 ;
  
  arg1 = (STargaImage::SExtensionArea::SSoftwareVersion *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_STargaImage_SExtensionArea_SKeyColor_A_set(void * jarg1, unsigned char jarg2) {
  STargaImage::SExtensionArea::SKeyColor *arg1 = (STargaImage::SExtensionArea::SKeyColor *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (STargaImage::SExtensionArea::SKeyColor *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->A = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_STargaImage_SExtensionArea_SKeyColor_A_get(void * jarg1) {
  unsigned char jresult ;
  STargaImage::SExtensionArea::SKeyColor *arg1 = (STargaImage::SExtensionArea::SKeyColor *) 0 ;
  uint8_t result;
  
  arg1 = (STargaImage::SExtensionArea::SKeyColor *)jarg1; 
  result = (uint8_t) ((arg1)->A);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_STargaImage_SExtensionArea_SKeyColor_R_set(void * jarg1, unsigned char jarg2) {
  STargaImage::SExtensionArea::SKeyColor *arg1 = (STargaImage::SExtensionArea::SKeyColor *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (STargaImage::SExtensionArea::SKeyColor *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->R = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_STargaImage_SExtensionArea_SKeyColor_R_get(void * jarg1) {
  unsigned char jresult ;
  STargaImage::SExtensionArea::SKeyColor *arg1 = (STargaImage::SExtensionArea::SKeyColor *) 0 ;
  uint8_t result;
  
  arg1 = (STargaImage::SExtensionArea::SKeyColor *)jarg1; 
  result = (uint8_t) ((arg1)->R);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_STargaImage_SExtensionArea_SKeyColor_G_set(void * jarg1, unsigned char jarg2) {
  STargaImage::SExtensionArea::SKeyColor *arg1 = (STargaImage::SExtensionArea::SKeyColor *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (STargaImage::SExtensionArea::SKeyColor *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->G = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_STargaImage_SExtensionArea_SKeyColor_G_get(void * jarg1) {
  unsigned char jresult ;
  STargaImage::SExtensionArea::SKeyColor *arg1 = (STargaImage::SExtensionArea::SKeyColor *) 0 ;
  uint8_t result;
  
  arg1 = (STargaImage::SExtensionArea::SKeyColor *)jarg1; 
  result = (uint8_t) ((arg1)->G);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_STargaImage_SExtensionArea_SKeyColor_B_set(void * jarg1, unsigned char jarg2) {
  STargaImage::SExtensionArea::SKeyColor *arg1 = (STargaImage::SExtensionArea::SKeyColor *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (STargaImage::SExtensionArea::SKeyColor *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->B = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_STargaImage_SExtensionArea_SKeyColor_B_get(void * jarg1) {
  unsigned char jresult ;
  STargaImage::SExtensionArea::SKeyColor *arg1 = (STargaImage::SExtensionArea::SKeyColor *) 0 ;
  uint8_t result;
  
  arg1 = (STargaImage::SExtensionArea::SKeyColor *)jarg1; 
  result = (uint8_t) ((arg1)->B);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_STargaImage_SExtensionArea_SKeyColor() {
  void * jresult ;
  STargaImage::SExtensionArea::SKeyColor *result = 0 ;
  
  result = (STargaImage::SExtensionArea::SKeyColor *)new STargaImage::SExtensionArea::SKeyColor();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_STargaImage_SExtensionArea_SKeyColor(void * jarg1) {
  STargaImage::SExtensionArea::SKeyColor *arg1 = (STargaImage::SExtensionArea::SKeyColor *) 0 ;
  
  arg1 = (STargaImage::SExtensionArea::SKeyColor *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_STargaImage_SExtensionArea_SPixelAspectRatio_Width_set(void * jarg1, unsigned short jarg2) {
  STargaImage::SExtensionArea::SPixelAspectRatio *arg1 = (STargaImage::SExtensionArea::SPixelAspectRatio *) 0 ;
  uint16_t arg2 ;
  
  arg1 = (STargaImage::SExtensionArea::SPixelAspectRatio *)jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->Width = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_STargaImage_SExtensionArea_SPixelAspectRatio_Width_get(void * jarg1) {
  unsigned short jresult ;
  STargaImage::SExtensionArea::SPixelAspectRatio *arg1 = (STargaImage::SExtensionArea::SPixelAspectRatio *) 0 ;
  uint16_t result;
  
  arg1 = (STargaImage::SExtensionArea::SPixelAspectRatio *)jarg1; 
  result = (uint16_t) ((arg1)->Width);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_STargaImage_SExtensionArea_SPixelAspectRatio_Height_set(void * jarg1, unsigned short jarg2) {
  STargaImage::SExtensionArea::SPixelAspectRatio *arg1 = (STargaImage::SExtensionArea::SPixelAspectRatio *) 0 ;
  uint16_t arg2 ;
  
  arg1 = (STargaImage::SExtensionArea::SPixelAspectRatio *)jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->Height = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_STargaImage_SExtensionArea_SPixelAspectRatio_Height_get(void * jarg1) {
  unsigned short jresult ;
  STargaImage::SExtensionArea::SPixelAspectRatio *arg1 = (STargaImage::SExtensionArea::SPixelAspectRatio *) 0 ;
  uint16_t result;
  
  arg1 = (STargaImage::SExtensionArea::SPixelAspectRatio *)jarg1; 
  result = (uint16_t) ((arg1)->Height);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_STargaImage_SExtensionArea_SPixelAspectRatio() {
  void * jresult ;
  STargaImage::SExtensionArea::SPixelAspectRatio *result = 0 ;
  
  result = (STargaImage::SExtensionArea::SPixelAspectRatio *)new STargaImage::SExtensionArea::SPixelAspectRatio();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_STargaImage_SExtensionArea_SPixelAspectRatio(void * jarg1) {
  STargaImage::SExtensionArea::SPixelAspectRatio *arg1 = (STargaImage::SExtensionArea::SPixelAspectRatio *) 0 ;
  
  arg1 = (STargaImage::SExtensionArea::SPixelAspectRatio *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_STargaImage_SExtensionArea_SGammaValue_Numerator_set(void * jarg1, unsigned short jarg2) {
  STargaImage::SExtensionArea::SGammaValue *arg1 = (STargaImage::SExtensionArea::SGammaValue *) 0 ;
  uint16_t arg2 ;
  
  arg1 = (STargaImage::SExtensionArea::SGammaValue *)jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->Numerator = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_STargaImage_SExtensionArea_SGammaValue_Numerator_get(void * jarg1) {
  unsigned short jresult ;
  STargaImage::SExtensionArea::SGammaValue *arg1 = (STargaImage::SExtensionArea::SGammaValue *) 0 ;
  uint16_t result;
  
  arg1 = (STargaImage::SExtensionArea::SGammaValue *)jarg1; 
  result = (uint16_t) ((arg1)->Numerator);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_STargaImage_SExtensionArea_SGammaValue_Denominator_set(void * jarg1, unsigned short jarg2) {
  STargaImage::SExtensionArea::SGammaValue *arg1 = (STargaImage::SExtensionArea::SGammaValue *) 0 ;
  uint16_t arg2 ;
  
  arg1 = (STargaImage::SExtensionArea::SGammaValue *)jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->Denominator = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_STargaImage_SExtensionArea_SGammaValue_Denominator_get(void * jarg1) {
  unsigned short jresult ;
  STargaImage::SExtensionArea::SGammaValue *arg1 = (STargaImage::SExtensionArea::SGammaValue *) 0 ;
  uint16_t result;
  
  arg1 = (STargaImage::SExtensionArea::SGammaValue *)jarg1; 
  result = (uint16_t) ((arg1)->Denominator);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_STargaImage_SExtensionArea_SGammaValue() {
  void * jresult ;
  STargaImage::SExtensionArea::SGammaValue *result = 0 ;
  
  result = (STargaImage::SExtensionArea::SGammaValue *)new STargaImage::SExtensionArea::SGammaValue();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_STargaImage_SExtensionArea_SGammaValue(void * jarg1) {
  STargaImage::SExtensionArea::SGammaValue *arg1 = (STargaImage::SExtensionArea::SGammaValue *) 0 ;
  
  arg1 = (STargaImage::SExtensionArea::SGammaValue *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_STargaImage_SExtensionArea_SColorCorrectionTable_SColor_A_set(void * jarg1, unsigned short jarg2) {
  STargaImage::SExtensionArea::SColorCorrectionTable::SColor *arg1 = (STargaImage::SExtensionArea::SColorCorrectionTable::SColor *) 0 ;
  uint16_t arg2 ;
  
  arg1 = (STargaImage::SExtensionArea::SColorCorrectionTable::SColor *)jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->A = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_STargaImage_SExtensionArea_SColorCorrectionTable_SColor_A_get(void * jarg1) {
  unsigned short jresult ;
  STargaImage::SExtensionArea::SColorCorrectionTable::SColor *arg1 = (STargaImage::SExtensionArea::SColorCorrectionTable::SColor *) 0 ;
  uint16_t result;
  
  arg1 = (STargaImage::SExtensionArea::SColorCorrectionTable::SColor *)jarg1; 
  result = (uint16_t) ((arg1)->A);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_STargaImage_SExtensionArea_SColorCorrectionTable_SColor_R_set(void * jarg1, unsigned short jarg2) {
  STargaImage::SExtensionArea::SColorCorrectionTable::SColor *arg1 = (STargaImage::SExtensionArea::SColorCorrectionTable::SColor *) 0 ;
  uint16_t arg2 ;
  
  arg1 = (STargaImage::SExtensionArea::SColorCorrectionTable::SColor *)jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->R = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_STargaImage_SExtensionArea_SColorCorrectionTable_SColor_R_get(void * jarg1) {
  unsigned short jresult ;
  STargaImage::SExtensionArea::SColorCorrectionTable::SColor *arg1 = (STargaImage::SExtensionArea::SColorCorrectionTable::SColor *) 0 ;
  uint16_t result;
  
  arg1 = (STargaImage::SExtensionArea::SColorCorrectionTable::SColor *)jarg1; 
  result = (uint16_t) ((arg1)->R);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_STargaImage_SExtensionArea_SColorCorrectionTable_SColor_G_set(void * jarg1, unsigned short jarg2) {
  STargaImage::SExtensionArea::SColorCorrectionTable::SColor *arg1 = (STargaImage::SExtensionArea::SColorCorrectionTable::SColor *) 0 ;
  uint16_t arg2 ;
  
  arg1 = (STargaImage::SExtensionArea::SColorCorrectionTable::SColor *)jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->G = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_STargaImage_SExtensionArea_SColorCorrectionTable_SColor_G_get(void * jarg1) {
  unsigned short jresult ;
  STargaImage::SExtensionArea::SColorCorrectionTable::SColor *arg1 = (STargaImage::SExtensionArea::SColorCorrectionTable::SColor *) 0 ;
  uint16_t result;
  
  arg1 = (STargaImage::SExtensionArea::SColorCorrectionTable::SColor *)jarg1; 
  result = (uint16_t) ((arg1)->G);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_STargaImage_SExtensionArea_SColorCorrectionTable_SColor_B_set(void * jarg1, unsigned short jarg2) {
  STargaImage::SExtensionArea::SColorCorrectionTable::SColor *arg1 = (STargaImage::SExtensionArea::SColorCorrectionTable::SColor *) 0 ;
  uint16_t arg2 ;
  
  arg1 = (STargaImage::SExtensionArea::SColorCorrectionTable::SColor *)jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->B = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_STargaImage_SExtensionArea_SColorCorrectionTable_SColor_B_get(void * jarg1) {
  unsigned short jresult ;
  STargaImage::SExtensionArea::SColorCorrectionTable::SColor *arg1 = (STargaImage::SExtensionArea::SColorCorrectionTable::SColor *) 0 ;
  uint16_t result;
  
  arg1 = (STargaImage::SExtensionArea::SColorCorrectionTable::SColor *)jarg1; 
  result = (uint16_t) ((arg1)->B);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_STargaImage_SExtensionArea_SColorCorrectionTable_SColor() {
  void * jresult ;
  STargaImage::SExtensionArea::SColorCorrectionTable::SColor *result = 0 ;
  
  result = (STargaImage::SExtensionArea::SColorCorrectionTable::SColor *)new STargaImage::SExtensionArea::SColorCorrectionTable::SColor();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_STargaImage_SExtensionArea_SColorCorrectionTable_SColor(void * jarg1) {
  STargaImage::SExtensionArea::SColorCorrectionTable::SColor *arg1 = (STargaImage::SExtensionArea::SColorCorrectionTable::SColor *) 0 ;
  
  arg1 = (STargaImage::SExtensionArea::SColorCorrectionTable::SColor *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_STargaImage_SExtensionArea_SColorCorrectionTable_Colors_set(void * jarg1, void * jarg2) {
  STargaImage::SExtensionArea::SColorCorrectionTable *arg1 = (STargaImage::SExtensionArea::SColorCorrectionTable *) 0 ;
  STargaImage::SExtensionArea::SColorCorrectionTable::SColor *arg2 ;
  
  arg1 = (STargaImage::SExtensionArea::SColorCorrectionTable *)jarg1; 
  arg2 = (STargaImage::SExtensionArea::SColorCorrectionTable::SColor *)jarg2; 
  {
    size_t ii;
    STargaImage::SExtensionArea::SColorCorrectionTable::SColor *b = (STargaImage::SExtensionArea::SColorCorrectionTable::SColor *) arg1->Colors;
    for (ii = 0; ii < (size_t)256; ii++) b[ii] = *((STargaImage::SExtensionArea::SColorCorrectionTable::SColor *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_STargaImage_SExtensionArea_SColorCorrectionTable_Colors_get(void * jarg1) {
  void * jresult ;
  STargaImage::SExtensionArea::SColorCorrectionTable *arg1 = (STargaImage::SExtensionArea::SColorCorrectionTable *) 0 ;
  STargaImage::SExtensionArea::SColorCorrectionTable::SColor *result = 0 ;
  
  arg1 = (STargaImage::SExtensionArea::SColorCorrectionTable *)jarg1; 
  result = (STargaImage::SExtensionArea::SColorCorrectionTable::SColor *)(STargaImage::SExtensionArea::SColorCorrectionTable::SColor *) ((arg1)->Colors);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_STargaImage_SExtensionArea_SColorCorrectionTable() {
  void * jresult ;
  STargaImage::SExtensionArea::SColorCorrectionTable *result = 0 ;
  
  result = (STargaImage::SExtensionArea::SColorCorrectionTable *)new STargaImage::SExtensionArea::SColorCorrectionTable();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_STargaImage_SExtensionArea_SColorCorrectionTable(void * jarg1) {
  STargaImage::SExtensionArea::SColorCorrectionTable *arg1 = (STargaImage::SExtensionArea::SColorCorrectionTable *) 0 ;
  
  arg1 = (STargaImage::SExtensionArea::SColorCorrectionTable *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_STargaImage_SExtensionArea_ExtensionSize_set(void * jarg1, unsigned short jarg2) {
  STargaImage::SExtensionArea *arg1 = (STargaImage::SExtensionArea *) 0 ;
  uint16_t arg2 ;
  
  arg1 = (STargaImage::SExtensionArea *)jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->ExtensionSize = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_STargaImage_SExtensionArea_ExtensionSize_get(void * jarg1) {
  unsigned short jresult ;
  STargaImage::SExtensionArea *arg1 = (STargaImage::SExtensionArea *) 0 ;
  uint16_t result;
  
  arg1 = (STargaImage::SExtensionArea *)jarg1; 
  result = (uint16_t) ((arg1)->ExtensionSize);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_STargaImage_SExtensionArea_AuthorName_set(void * jarg1, void * jarg2) {
  STargaImage::SExtensionArea *arg1 = (STargaImage::SExtensionArea *) 0 ;
  uint8_t *arg2 ;
  
  arg1 = (STargaImage::SExtensionArea *)jarg1; 
  arg2 = (uint8_t *)jarg2; 
  {
    size_t ii;
    uint8_t *b = (uint8_t *) arg1->AuthorName;
    for (ii = 0; ii < (size_t)41; ii++) b[ii] = *((uint8_t *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_STargaImage_SExtensionArea_AuthorName_get(void * jarg1) {
  void * jresult ;
  STargaImage::SExtensionArea *arg1 = (STargaImage::SExtensionArea *) 0 ;
  uint8_t *result = 0 ;
  
  arg1 = (STargaImage::SExtensionArea *)jarg1; 
  result = (uint8_t *)(uint8_t *) ((arg1)->AuthorName);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_STargaImage_SExtensionArea_AuthorComments_set(void * jarg1, void * jarg2) {
  STargaImage::SExtensionArea *arg1 = (STargaImage::SExtensionArea *) 0 ;
  uint8_t *arg2 ;
  
  arg1 = (STargaImage::SExtensionArea *)jarg1; 
  arg2 = (uint8_t *)jarg2; 
  {
    size_t ii;
    uint8_t *b = (uint8_t *) arg1->AuthorComments;
    for (ii = 0; ii < (size_t)324; ii++) b[ii] = *((uint8_t *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_STargaImage_SExtensionArea_AuthorComments_get(void * jarg1) {
  void * jresult ;
  STargaImage::SExtensionArea *arg1 = (STargaImage::SExtensionArea *) 0 ;
  uint8_t *result = 0 ;
  
  arg1 = (STargaImage::SExtensionArea *)jarg1; 
  result = (uint8_t *)(uint8_t *) ((arg1)->AuthorComments);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_STargaImage_SExtensionArea_TimeStamp_set(void * jarg1, void * jarg2) {
  STargaImage::SExtensionArea *arg1 = (STargaImage::SExtensionArea *) 0 ;
  STargaImage::SExtensionArea::STimeStamp *arg2 = (STargaImage::SExtensionArea::STimeStamp *) 0 ;
  
  arg1 = (STargaImage::SExtensionArea *)jarg1; 
  arg2 = (STargaImage::SExtensionArea::STimeStamp *)jarg2; 
  if (arg1) (arg1)->TimeStamp = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_STargaImage_SExtensionArea_TimeStamp_get(void * jarg1) {
  void * jresult ;
  STargaImage::SExtensionArea *arg1 = (STargaImage::SExtensionArea *) 0 ;
  STargaImage::SExtensionArea::STimeStamp *result = 0 ;
  
  arg1 = (STargaImage::SExtensionArea *)jarg1; 
  result = (STargaImage::SExtensionArea::STimeStamp *)& ((arg1)->TimeStamp);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_STargaImage_SExtensionArea_JobName_set(void * jarg1, void * jarg2) {
  STargaImage::SExtensionArea *arg1 = (STargaImage::SExtensionArea *) 0 ;
  uint8_t *arg2 ;
  
  arg1 = (STargaImage::SExtensionArea *)jarg1; 
  arg2 = (uint8_t *)jarg2; 
  {
    size_t ii;
    uint8_t *b = (uint8_t *) arg1->JobName;
    for (ii = 0; ii < (size_t)41; ii++) b[ii] = *((uint8_t *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_STargaImage_SExtensionArea_JobName_get(void * jarg1) {
  void * jresult ;
  STargaImage::SExtensionArea *arg1 = (STargaImage::SExtensionArea *) 0 ;
  uint8_t *result = 0 ;
  
  arg1 = (STargaImage::SExtensionArea *)jarg1; 
  result = (uint8_t *)(uint8_t *) ((arg1)->JobName);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_STargaImage_SExtensionArea_JobTime_set(void * jarg1, void * jarg2) {
  STargaImage::SExtensionArea *arg1 = (STargaImage::SExtensionArea *) 0 ;
  STargaImage::SExtensionArea::SJobTime *arg2 = (STargaImage::SExtensionArea::SJobTime *) 0 ;
  
  arg1 = (STargaImage::SExtensionArea *)jarg1; 
  arg2 = (STargaImage::SExtensionArea::SJobTime *)jarg2; 
  if (arg1) (arg1)->JobTime = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_STargaImage_SExtensionArea_JobTime_get(void * jarg1) {
  void * jresult ;
  STargaImage::SExtensionArea *arg1 = (STargaImage::SExtensionArea *) 0 ;
  STargaImage::SExtensionArea::SJobTime *result = 0 ;
  
  arg1 = (STargaImage::SExtensionArea *)jarg1; 
  result = (STargaImage::SExtensionArea::SJobTime *)& ((arg1)->JobTime);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_STargaImage_SExtensionArea_SoftwareID_set(void * jarg1, void * jarg2) {
  STargaImage::SExtensionArea *arg1 = (STargaImage::SExtensionArea *) 0 ;
  uint8_t *arg2 ;
  
  arg1 = (STargaImage::SExtensionArea *)jarg1; 
  arg2 = (uint8_t *)jarg2; 
  {
    size_t ii;
    uint8_t *b = (uint8_t *) arg1->SoftwareID;
    for (ii = 0; ii < (size_t)41; ii++) b[ii] = *((uint8_t *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_STargaImage_SExtensionArea_SoftwareID_get(void * jarg1) {
  void * jresult ;
  STargaImage::SExtensionArea *arg1 = (STargaImage::SExtensionArea *) 0 ;
  uint8_t *result = 0 ;
  
  arg1 = (STargaImage::SExtensionArea *)jarg1; 
  result = (uint8_t *)(uint8_t *) ((arg1)->SoftwareID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_STargaImage_SExtensionArea_SoftwareVersion_set(void * jarg1, void * jarg2) {
  STargaImage::SExtensionArea *arg1 = (STargaImage::SExtensionArea *) 0 ;
  STargaImage::SExtensionArea::SSoftwareVersion *arg2 = (STargaImage::SExtensionArea::SSoftwareVersion *) 0 ;
  
  arg1 = (STargaImage::SExtensionArea *)jarg1; 
  arg2 = (STargaImage::SExtensionArea::SSoftwareVersion *)jarg2; 
  if (arg1) (arg1)->SoftwareVersion = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_STargaImage_SExtensionArea_SoftwareVersion_get(void * jarg1) {
  void * jresult ;
  STargaImage::SExtensionArea *arg1 = (STargaImage::SExtensionArea *) 0 ;
  STargaImage::SExtensionArea::SSoftwareVersion *result = 0 ;
  
  arg1 = (STargaImage::SExtensionArea *)jarg1; 
  result = (STargaImage::SExtensionArea::SSoftwareVersion *)& ((arg1)->SoftwareVersion);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_STargaImage_SExtensionArea_KeyColor_set(void * jarg1, void * jarg2) {
  STargaImage::SExtensionArea *arg1 = (STargaImage::SExtensionArea *) 0 ;
  STargaImage::SExtensionArea::SKeyColor *arg2 = (STargaImage::SExtensionArea::SKeyColor *) 0 ;
  
  arg1 = (STargaImage::SExtensionArea *)jarg1; 
  arg2 = (STargaImage::SExtensionArea::SKeyColor *)jarg2; 
  if (arg1) (arg1)->KeyColor = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_STargaImage_SExtensionArea_KeyColor_get(void * jarg1) {
  void * jresult ;
  STargaImage::SExtensionArea *arg1 = (STargaImage::SExtensionArea *) 0 ;
  STargaImage::SExtensionArea::SKeyColor *result = 0 ;
  
  arg1 = (STargaImage::SExtensionArea *)jarg1; 
  result = (STargaImage::SExtensionArea::SKeyColor *)& ((arg1)->KeyColor);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_STargaImage_SExtensionArea_PixelAspectRatio_set(void * jarg1, void * jarg2) {
  STargaImage::SExtensionArea *arg1 = (STargaImage::SExtensionArea *) 0 ;
  STargaImage::SExtensionArea::SPixelAspectRatio *arg2 = (STargaImage::SExtensionArea::SPixelAspectRatio *) 0 ;
  
  arg1 = (STargaImage::SExtensionArea *)jarg1; 
  arg2 = (STargaImage::SExtensionArea::SPixelAspectRatio *)jarg2; 
  if (arg1) (arg1)->PixelAspectRatio = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_STargaImage_SExtensionArea_PixelAspectRatio_get(void * jarg1) {
  void * jresult ;
  STargaImage::SExtensionArea *arg1 = (STargaImage::SExtensionArea *) 0 ;
  STargaImage::SExtensionArea::SPixelAspectRatio *result = 0 ;
  
  arg1 = (STargaImage::SExtensionArea *)jarg1; 
  result = (STargaImage::SExtensionArea::SPixelAspectRatio *)& ((arg1)->PixelAspectRatio);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_STargaImage_SExtensionArea_GammaValue_set(void * jarg1, void * jarg2) {
  STargaImage::SExtensionArea *arg1 = (STargaImage::SExtensionArea *) 0 ;
  STargaImage::SExtensionArea::SGammaValue *arg2 = (STargaImage::SExtensionArea::SGammaValue *) 0 ;
  
  arg1 = (STargaImage::SExtensionArea *)jarg1; 
  arg2 = (STargaImage::SExtensionArea::SGammaValue *)jarg2; 
  if (arg1) (arg1)->GammaValue = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_STargaImage_SExtensionArea_GammaValue_get(void * jarg1) {
  void * jresult ;
  STargaImage::SExtensionArea *arg1 = (STargaImage::SExtensionArea *) 0 ;
  STargaImage::SExtensionArea::SGammaValue *result = 0 ;
  
  arg1 = (STargaImage::SExtensionArea *)jarg1; 
  result = (STargaImage::SExtensionArea::SGammaValue *)& ((arg1)->GammaValue);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_STargaImage_SExtensionArea_ColorCorrectionOffset_set(void * jarg1, unsigned int jarg2) {
  STargaImage::SExtensionArea *arg1 = (STargaImage::SExtensionArea *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (STargaImage::SExtensionArea *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->ColorCorrectionOffset = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_STargaImage_SExtensionArea_ColorCorrectionOffset_get(void * jarg1) {
  unsigned int jresult ;
  STargaImage::SExtensionArea *arg1 = (STargaImage::SExtensionArea *) 0 ;
  uint32_t result;
  
  arg1 = (STargaImage::SExtensionArea *)jarg1; 
  result = (uint32_t) ((arg1)->ColorCorrectionOffset);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_STargaImage_SExtensionArea_PostageStampOffset_set(void * jarg1, unsigned int jarg2) {
  STargaImage::SExtensionArea *arg1 = (STargaImage::SExtensionArea *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (STargaImage::SExtensionArea *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->PostageStampOffset = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_STargaImage_SExtensionArea_PostageStampOffset_get(void * jarg1) {
  unsigned int jresult ;
  STargaImage::SExtensionArea *arg1 = (STargaImage::SExtensionArea *) 0 ;
  uint32_t result;
  
  arg1 = (STargaImage::SExtensionArea *)jarg1; 
  result = (uint32_t) ((arg1)->PostageStampOffset);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_STargaImage_SExtensionArea_Padding5_set(void * jarg1, unsigned char jarg2) {
  STargaImage::SExtensionArea *arg1 = (STargaImage::SExtensionArea *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (STargaImage::SExtensionArea *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->Padding5 = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_STargaImage_SExtensionArea_Padding5_get(void * jarg1) {
  unsigned char jresult ;
  STargaImage::SExtensionArea *arg1 = (STargaImage::SExtensionArea *) 0 ;
  uint8_t result;
  
  arg1 = (STargaImage::SExtensionArea *)jarg1; 
  result = (uint8_t) ((arg1)->Padding5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_STargaImage_SExtensionArea_Padding6_set(void * jarg1, unsigned char jarg2) {
  STargaImage::SExtensionArea *arg1 = (STargaImage::SExtensionArea *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (STargaImage::SExtensionArea *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->Padding6 = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_STargaImage_SExtensionArea_Padding6_get(void * jarg1) {
  unsigned char jresult ;
  STargaImage::SExtensionArea *arg1 = (STargaImage::SExtensionArea *) 0 ;
  uint8_t result;
  
  arg1 = (STargaImage::SExtensionArea *)jarg1; 
  result = (uint8_t) ((arg1)->Padding6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_STargaImage_SExtensionArea_Padding7_set(void * jarg1, unsigned char jarg2) {
  STargaImage::SExtensionArea *arg1 = (STargaImage::SExtensionArea *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (STargaImage::SExtensionArea *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->Padding7 = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_STargaImage_SExtensionArea_Padding7_get(void * jarg1) {
  unsigned char jresult ;
  STargaImage::SExtensionArea *arg1 = (STargaImage::SExtensionArea *) 0 ;
  uint8_t result;
  
  arg1 = (STargaImage::SExtensionArea *)jarg1; 
  result = (uint8_t) ((arg1)->Padding7);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_STargaImage_SExtensionArea_ScanLineOffset_set(void * jarg1, unsigned int jarg2) {
  STargaImage::SExtensionArea *arg1 = (STargaImage::SExtensionArea *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (STargaImage::SExtensionArea *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->ScanLineOffset = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_STargaImage_SExtensionArea_ScanLineOffset_get(void * jarg1) {
  unsigned int jresult ;
  STargaImage::SExtensionArea *arg1 = (STargaImage::SExtensionArea *) 0 ;
  uint32_t result;
  
  arg1 = (STargaImage::SExtensionArea *)jarg1; 
  result = (uint32_t) ((arg1)->ScanLineOffset);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_STargaImage_SExtensionArea_AttributesType_set(void * jarg1, unsigned char jarg2) {
  STargaImage::SExtensionArea *arg1 = (STargaImage::SExtensionArea *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (STargaImage::SExtensionArea *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->AttributesType = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_STargaImage_SExtensionArea_AttributesType_get(void * jarg1) {
  unsigned char jresult ;
  STargaImage::SExtensionArea *arg1 = (STargaImage::SExtensionArea *) 0 ;
  uint8_t result;
  
  arg1 = (STargaImage::SExtensionArea *)jarg1; 
  result = (uint8_t) ((arg1)->AttributesType);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_STargaImage_SExtensionArea_pScanLineTable_set(void * jarg1, void * jarg2) {
  STargaImage::SExtensionArea *arg1 = (STargaImage::SExtensionArea *) 0 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  
  arg1 = (STargaImage::SExtensionArea *)jarg1; 
  arg2 = (uint8_t *)jarg2; 
  if (arg1) (arg1)->pScanLineTable = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_STargaImage_SExtensionArea_pScanLineTable_get(void * jarg1) {
  void * jresult ;
  STargaImage::SExtensionArea *arg1 = (STargaImage::SExtensionArea *) 0 ;
  uint8_t *result = 0 ;
  
  arg1 = (STargaImage::SExtensionArea *)jarg1; 
  result = (uint8_t *) ((arg1)->pScanLineTable);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_STargaImage_SExtensionArea_pPostageStampImage_set(void * jarg1, void * jarg2) {
  STargaImage::SExtensionArea *arg1 = (STargaImage::SExtensionArea *) 0 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  
  arg1 = (STargaImage::SExtensionArea *)jarg1; 
  arg2 = (uint8_t *)jarg2; 
  if (arg1) (arg1)->pPostageStampImage = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_STargaImage_SExtensionArea_pPostageStampImage_get(void * jarg1) {
  void * jresult ;
  STargaImage::SExtensionArea *arg1 = (STargaImage::SExtensionArea *) 0 ;
  uint8_t *result = 0 ;
  
  arg1 = (STargaImage::SExtensionArea *)jarg1; 
  result = (uint8_t *) ((arg1)->pPostageStampImage);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_STargaImage_SExtensionArea_ColorCorrectioinTable_set(void * jarg1, void * jarg2) {
  STargaImage::SExtensionArea *arg1 = (STargaImage::SExtensionArea *) 0 ;
  STargaImage::SExtensionArea::SColorCorrectionTable *arg2 = (STargaImage::SExtensionArea::SColorCorrectionTable *) 0 ;
  
  arg1 = (STargaImage::SExtensionArea *)jarg1; 
  arg2 = (STargaImage::SExtensionArea::SColorCorrectionTable *)jarg2; 
  if (arg1) (arg1)->ColorCorrectioinTable = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_STargaImage_SExtensionArea_ColorCorrectioinTable_get(void * jarg1) {
  void * jresult ;
  STargaImage::SExtensionArea *arg1 = (STargaImage::SExtensionArea *) 0 ;
  STargaImage::SExtensionArea::SColorCorrectionTable *result = 0 ;
  
  arg1 = (STargaImage::SExtensionArea *)jarg1; 
  result = (STargaImage::SExtensionArea::SColorCorrectionTable *)& ((arg1)->ColorCorrectioinTable);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_STargaImage_SExtensionArea() {
  void * jresult ;
  STargaImage::SExtensionArea *result = 0 ;
  
  result = (STargaImage::SExtensionArea *)new STargaImage::SExtensionArea();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_STargaImage_SExtensionArea(void * jarg1) {
  STargaImage::SExtensionArea *arg1 = (STargaImage::SExtensionArea *) 0 ;
  
  arg1 = (STargaImage::SExtensionArea *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_STargaImage_SFooter_ExtensionAreaOffset_set(void * jarg1, unsigned int jarg2) {
  STargaImage::SFooter *arg1 = (STargaImage::SFooter *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (STargaImage::SFooter *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->ExtensionAreaOffset = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_STargaImage_SFooter_ExtensionAreaOffset_get(void * jarg1) {
  unsigned int jresult ;
  STargaImage::SFooter *arg1 = (STargaImage::SFooter *) 0 ;
  uint32_t result;
  
  arg1 = (STargaImage::SFooter *)jarg1; 
  result = (uint32_t) ((arg1)->ExtensionAreaOffset);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_STargaImage_SFooter_DeveloperDictionaryOffset_set(void * jarg1, unsigned int jarg2) {
  STargaImage::SFooter *arg1 = (STargaImage::SFooter *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (STargaImage::SFooter *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->DeveloperDictionaryOffset = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_STargaImage_SFooter_DeveloperDictionaryOffset_get(void * jarg1) {
  unsigned int jresult ;
  STargaImage::SFooter *arg1 = (STargaImage::SFooter *) 0 ;
  uint32_t result;
  
  arg1 = (STargaImage::SFooter *)jarg1; 
  result = (uint32_t) ((arg1)->DeveloperDictionaryOffset);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_STargaImage_SFooter_Signature_set(void * jarg1, void * jarg2) {
  STargaImage::SFooter *arg1 = (STargaImage::SFooter *) 0 ;
  uint8_t *arg2 ;
  
  arg1 = (STargaImage::SFooter *)jarg1; 
  arg2 = (uint8_t *)jarg2; 
  {
    size_t ii;
    uint8_t *b = (uint8_t *) arg1->Signature;
    for (ii = 0; ii < (size_t)16; ii++) b[ii] = *((uint8_t *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_STargaImage_SFooter_Signature_get(void * jarg1) {
  void * jresult ;
  STargaImage::SFooter *arg1 = (STargaImage::SFooter *) 0 ;
  uint8_t *result = 0 ;
  
  arg1 = (STargaImage::SFooter *)jarg1; 
  result = (uint8_t *)(uint8_t *) ((arg1)->Signature);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_STargaImage_SFooter_Reserved_set(void * jarg1, unsigned char jarg2) {
  STargaImage::SFooter *arg1 = (STargaImage::SFooter *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (STargaImage::SFooter *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->Reserved = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_STargaImage_SFooter_Reserved_get(void * jarg1) {
  unsigned char jresult ;
  STargaImage::SFooter *arg1 = (STargaImage::SFooter *) 0 ;
  uint8_t result;
  
  arg1 = (STargaImage::SFooter *)jarg1; 
  result = (uint8_t) ((arg1)->Reserved);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_STargaImage_SFooter_BinaryZeroStringTerminator_set(void * jarg1, unsigned char jarg2) {
  STargaImage::SFooter *arg1 = (STargaImage::SFooter *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (STargaImage::SFooter *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->BinaryZeroStringTerminator = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_STargaImage_SFooter_BinaryZeroStringTerminator_get(void * jarg1) {
  unsigned char jresult ;
  STargaImage::SFooter *arg1 = (STargaImage::SFooter *) 0 ;
  uint8_t result;
  
  arg1 = (STargaImage::SFooter *)jarg1; 
  result = (uint8_t) ((arg1)->BinaryZeroStringTerminator);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_STargaImage_SFooter() {
  void * jresult ;
  STargaImage::SFooter *result = 0 ;
  
  result = (STargaImage::SFooter *)new STargaImage::SFooter();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_STargaImage_SFooter(void * jarg1) {
  STargaImage::SFooter *arg1 = (STargaImage::SFooter *) 0 ;
  
  arg1 = (STargaImage::SFooter *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_STargaImage_RawData_set(void * jarg1, void * jarg2) {
  STargaImage *arg1 = (STargaImage *) 0 ;
  std::vector< uint8_t > arg2 ;
  std::vector< uint8_t > *argp2 ;
  
  arg1 = (STargaImage *)jarg1; 
  argp2 = (std::vector< uint8_t > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::vector< uint8_t >", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->RawData = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_STargaImage_RawData_get(void * jarg1) {
  void * jresult ;
  STargaImage *arg1 = (STargaImage *) 0 ;
  std::vector< uint8_t > result;
  
  arg1 = (STargaImage *)jarg1; 
  result =  ((arg1)->RawData);
  jresult = new std::vector< uint8_t >((const std::vector< uint8_t > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_STargaImage_pHeader_set(void * jarg1, void * jarg2) {
  STargaImage *arg1 = (STargaImage *) 0 ;
  STargaImage::SHeader *arg2 = (STargaImage::SHeader *) 0 ;
  
  arg1 = (STargaImage *)jarg1; 
  arg2 = (STargaImage::SHeader *)jarg2; 
  if (arg1) (arg1)->pHeader = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_STargaImage_pHeader_get(void * jarg1) {
  void * jresult ;
  STargaImage *arg1 = (STargaImage *) 0 ;
  STargaImage::SHeader *result = 0 ;
  
  arg1 = (STargaImage *)jarg1; 
  result = (STargaImage::SHeader *) ((arg1)->pHeader);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_STargaImage_pDeveloperArea_set(void * jarg1, void * jarg2) {
  STargaImage *arg1 = (STargaImage *) 0 ;
  STargaImage::SDeveloperArea *arg2 = (STargaImage::SDeveloperArea *) 0 ;
  
  arg1 = (STargaImage *)jarg1; 
  arg2 = (STargaImage::SDeveloperArea *)jarg2; 
  if (arg1) (arg1)->pDeveloperArea = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_STargaImage_pDeveloperArea_get(void * jarg1) {
  void * jresult ;
  STargaImage *arg1 = (STargaImage *) 0 ;
  STargaImage::SDeveloperArea *result = 0 ;
  
  arg1 = (STargaImage *)jarg1; 
  result = (STargaImage::SDeveloperArea *) ((arg1)->pDeveloperArea);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_STargaImage_pDeveloperDirectory_set(void * jarg1, void * jarg2) {
  STargaImage *arg1 = (STargaImage *) 0 ;
  STargaImage::SDeveloperDirectory *arg2 = (STargaImage::SDeveloperDirectory *) 0 ;
  
  arg1 = (STargaImage *)jarg1; 
  arg2 = (STargaImage::SDeveloperDirectory *)jarg2; 
  if (arg1) (arg1)->pDeveloperDirectory = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_STargaImage_pDeveloperDirectory_get(void * jarg1) {
  void * jresult ;
  STargaImage *arg1 = (STargaImage *) 0 ;
  STargaImage::SDeveloperDirectory *result = 0 ;
  
  arg1 = (STargaImage *)jarg1; 
  result = (STargaImage::SDeveloperDirectory *) ((arg1)->pDeveloperDirectory);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_STargaImage_ImageArea_set(void * jarg1, void * jarg2) {
  STargaImage *arg1 = (STargaImage *) 0 ;
  STargaImage::SData *arg2 = (STargaImage::SData *) 0 ;
  
  arg1 = (STargaImage *)jarg1; 
  arg2 = (STargaImage::SData *)jarg2; 
  if (arg1) (arg1)->ImageArea = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_STargaImage_ImageArea_get(void * jarg1) {
  void * jresult ;
  STargaImage *arg1 = (STargaImage *) 0 ;
  STargaImage::SData *result = 0 ;
  
  arg1 = (STargaImage *)jarg1; 
  result = (STargaImage::SData *)& ((arg1)->ImageArea);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_STargaImage_pExtensionArea_set(void * jarg1, void * jarg2) {
  STargaImage *arg1 = (STargaImage *) 0 ;
  STargaImage::SExtensionArea *arg2 = (STargaImage::SExtensionArea *) 0 ;
  
  arg1 = (STargaImage *)jarg1; 
  arg2 = (STargaImage::SExtensionArea *)jarg2; 
  if (arg1) (arg1)->pExtensionArea = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_STargaImage_pExtensionArea_get(void * jarg1) {
  void * jresult ;
  STargaImage *arg1 = (STargaImage *) 0 ;
  STargaImage::SExtensionArea *result = 0 ;
  
  arg1 = (STargaImage *)jarg1; 
  result = (STargaImage::SExtensionArea *) ((arg1)->pExtensionArea);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_STargaImage_pFooter_set(void * jarg1, void * jarg2) {
  STargaImage *arg1 = (STargaImage *) 0 ;
  STargaImage::SFooter *arg2 = (STargaImage::SFooter *) 0 ;
  
  arg1 = (STargaImage *)jarg1; 
  arg2 = (STargaImage::SFooter *)jarg2; 
  if (arg1) (arg1)->pFooter = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_STargaImage_pFooter_get(void * jarg1) {
  void * jresult ;
  STargaImage *arg1 = (STargaImage *) 0 ;
  STargaImage::SFooter *result = 0 ;
  
  arg1 = (STargaImage *)jarg1; 
  result = (STargaImage::SFooter *) ((arg1)->pFooter);
  jresult = (void *)result; 
  return jresult;
}


#ifdef __cplusplus
}
#endif

